//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct InitializeConfig {
    /// Stake config account
    pub config: solana_program::pubkey::Pubkey,
    /// Config authority
    pub authority: solana_program::pubkey::Pubkey,
    /// Slash authority
    pub slash_authority: solana_program::pubkey::Pubkey,
    /// Stake token mint
    pub mint: solana_program::pubkey::Pubkey,
    /// Stake token vault
    pub vault_token: solana_program::pubkey::Pubkey,
    /// Payer account for rent fees
    pub payer: Option<solana_program::pubkey::Pubkey>,
    /// System program account
    pub system_program: Option<solana_program::pubkey::Pubkey>,
}

impl InitializeConfig {
    pub fn instruction(
        &self,
        args: InitializeConfigInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeConfigInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.slash_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_token,
            false,
        ));
        if let Some(payer) = self.payer {
            accounts.push(solana_program::instruction::AccountMeta::new(payer, true));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::STAKE_ID,
                false,
            ));
        }
        if let Some(system_program) = self.system_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                system_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::STAKE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = InitializeConfigInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::STAKE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct InitializeConfigInstructionData {
    discriminator: u8,
}

impl InitializeConfigInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 0 }
    }
}

impl Default for InitializeConfigInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeConfigInstructionArgs {
    pub cooldown_time: u64,
    pub max_deactivation_basis_points: u16,
}

/// Instruction builder for `InitializeConfig`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` config
///   1. `[]` authority
///   2. `[]` slash_authority
///   3. `[]` mint
///   4. `[]` vault_token
///   5. `[writable, signer, optional]` payer
///   6. `[optional]` system_program
#[derive(Clone, Debug, Default)]
pub struct InitializeConfigBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    slash_authority: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    vault_token: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    cooldown_time: Option<u64>,
    max_deactivation_basis_points: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeConfigBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    /// Config authority
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Slash authority
    #[inline(always)]
    pub fn slash_authority(
        &mut self,
        slash_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.slash_authority = Some(slash_authority);
        self
    }
    /// Stake token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    /// Stake token vault
    #[inline(always)]
    pub fn vault_token(&mut self, vault_token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_token = Some(vault_token);
        self
    }
    /// `[optional account]`
    /// Payer account for rent fees
    #[inline(always)]
    pub fn payer(&mut self, payer: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.payer = payer;
        self
    }
    /// `[optional account]`
    /// System program account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.system_program = system_program;
        self
    }
    #[inline(always)]
    pub fn cooldown_time(&mut self, cooldown_time: u64) -> &mut Self {
        self.cooldown_time = Some(cooldown_time);
        self
    }
    #[inline(always)]
    pub fn max_deactivation_basis_points(
        &mut self,
        max_deactivation_basis_points: u16,
    ) -> &mut Self {
        self.max_deactivation_basis_points = Some(max_deactivation_basis_points);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeConfig {
            config: self.config.expect("config is not set"),
            authority: self.authority.expect("authority is not set"),
            slash_authority: self.slash_authority.expect("slash_authority is not set"),
            mint: self.mint.expect("mint is not set"),
            vault_token: self.vault_token.expect("vault_token is not set"),
            payer: self.payer,
            system_program: self.system_program,
        };
        let args = InitializeConfigInstructionArgs {
            cooldown_time: self
                .cooldown_time
                .clone()
                .expect("cooldown_time is not set"),
            max_deactivation_basis_points: self
                .max_deactivation_basis_points
                .clone()
                .expect("max_deactivation_basis_points is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_config` CPI accounts.
pub struct InitializeConfigCpiAccounts<'a, 'b> {
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Config authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Slash authority
    pub slash_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake token vault
    pub vault_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer account for rent fees
    pub payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// System program account
    pub system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `initialize_config` CPI instruction.
pub struct InitializeConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Config authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Slash authority
    pub slash_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake token vault
    pub vault_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer account for rent fees
    pub payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// System program account
    pub system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: InitializeConfigInstructionArgs,
}

impl<'a, 'b> InitializeConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeConfigCpiAccounts<'a, 'b>,
        args: InitializeConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            authority: accounts.authority,
            slash_authority: accounts.slash_authority,
            mint: accounts.mint,
            vault_token: accounts.vault_token,
            payer: accounts.payer,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.slash_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_token.key,
            false,
        ));
        if let Some(payer) = self.payer {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *payer.key, true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::STAKE_ID,
                false,
            ));
        }
        if let Some(system_program) = self.system_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *system_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::STAKE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = InitializeConfigInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::STAKE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.slash_authority.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.vault_token.clone());
        if let Some(payer) = self.payer {
            account_infos.push(payer.clone());
        }
        if let Some(system_program) = self.system_program {
            account_infos.push(system_program.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` config
///   1. `[]` authority
///   2. `[]` slash_authority
///   3. `[]` mint
///   4. `[]` vault_token
///   5. `[writable, signer, optional]` payer
///   6. `[optional]` system_program
#[derive(Clone, Debug)]
pub struct InitializeConfigCpiBuilder<'a, 'b> {
    instruction: Box<InitializeConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeConfigCpiBuilderInstruction {
            __program: program,
            config: None,
            authority: None,
            slash_authority: None,
            mint: None,
            vault_token: None,
            payer: None,
            system_program: None,
            cooldown_time: None,
            max_deactivation_basis_points: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    /// Config authority
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Slash authority
    #[inline(always)]
    pub fn slash_authority(
        &mut self,
        slash_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.slash_authority = Some(slash_authority);
        self
    }
    /// Stake token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    /// Stake token vault
    #[inline(always)]
    pub fn vault_token(
        &mut self,
        vault_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_token = Some(vault_token);
        self
    }
    /// `[optional account]`
    /// Payer account for rent fees
    #[inline(always)]
    pub fn payer(
        &mut self,
        payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.payer = payer;
        self
    }
    /// `[optional account]`
    /// System program account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.system_program = system_program;
        self
    }
    #[inline(always)]
    pub fn cooldown_time(&mut self, cooldown_time: u64) -> &mut Self {
        self.instruction.cooldown_time = Some(cooldown_time);
        self
    }
    #[inline(always)]
    pub fn max_deactivation_basis_points(
        &mut self,
        max_deactivation_basis_points: u16,
    ) -> &mut Self {
        self.instruction.max_deactivation_basis_points = Some(max_deactivation_basis_points);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeConfigInstructionArgs {
            cooldown_time: self
                .instruction
                .cooldown_time
                .clone()
                .expect("cooldown_time is not set"),
            max_deactivation_basis_points: self
                .instruction
                .max_deactivation_basis_points
                .clone()
                .expect("max_deactivation_basis_points is not set"),
        };
        let instruction = InitializeConfigCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            slash_authority: self
                .instruction
                .slash_authority
                .expect("slash_authority is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            vault_token: self
                .instruction
                .vault_token
                .expect("vault_token is not set"),

            payer: self.instruction.payer,

            system_program: self.instruction.system_program,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    slash_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cooldown_time: Option<u64>,
    max_deactivation_basis_points: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
