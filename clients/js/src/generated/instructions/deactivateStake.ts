/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlySignerAccount,
  TransactionSigner,
  WritableAccount,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type DeactivateStakeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type DeactivateStakeInstructionData = {
  discriminator: number;
  args: bigint;
};

export type DeactivateStakeInstructionDataArgs = { args: number | bigint };

export function getDeactivateStakeInstructionDataEncoder(): Encoder<DeactivateStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['args', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 3 })
  );
}

export function getDeactivateStakeInstructionDataDecoder(): Decoder<DeactivateStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['args', getU64Decoder()],
  ]);
}

export function getDeactivateStakeInstructionDataCodec(): Codec<
  DeactivateStakeInstructionDataArgs,
  DeactivateStakeInstructionData
> {
  return combineCodec(
    getDeactivateStakeInstructionDataEncoder(),
    getDeactivateStakeInstructionDataDecoder()
  );
}

export type DeactivateStakeInput<
  TAccountStake extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** Validator stake account */
  stake: Address<TAccountStake>;
  /** Authority on validator stake account */
  authority: TransactionSigner<TAccountAuthority>;
  args: DeactivateStakeInstructionDataArgs['args'];
};

export function getDeactivateStakeInstruction<
  TAccountStake extends string,
  TAccountAuthority extends string,
>(
  input: DeactivateStakeInput<TAccountStake, TAccountAuthority>
): DeactivateStakeInstruction<
  typeof STAKE_PROGRAM_ADDRESS,
  TAccountStake,
  TAccountAuthority
> {
  // Program address.
  const programAddress = STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stake: { value: input.stake ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getDeactivateStakeInstructionDataEncoder().encode(
      args as DeactivateStakeInstructionDataArgs
    ),
  } as DeactivateStakeInstruction<
    typeof STAKE_PROGRAM_ADDRESS,
    TAccountStake,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedDeactivateStakeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Validator stake account */
    stake: TAccountMetas[0];
    /** Authority on validator stake account */
    authority: TAccountMetas[1];
  };
  data: DeactivateStakeInstructionData;
};

export function parseDeactivateStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDeactivateStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stake: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getDeactivateStakeInstructionDataDecoder().decode(instruction.data),
  };
}
