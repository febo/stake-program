/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type DistributeRewardsInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DistributeRewardsInstructionData = {
  discriminator: number;
  args: bigint;
};

export type DistributeRewardsInstructionDataArgs = { args: number | bigint };

export function getDistributeRewardsInstructionDataEncoder(): Encoder<DistributeRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['args', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 11 })
  );
}

export function getDistributeRewardsInstructionDataDecoder(): Decoder<DistributeRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['args', getU64Decoder()],
  ]);
}

export function getDistributeRewardsInstructionDataCodec(): Codec<
  DistributeRewardsInstructionDataArgs,
  DistributeRewardsInstructionData
> {
  return combineCodec(
    getDistributeRewardsInstructionDataEncoder(),
    getDistributeRewardsInstructionDataDecoder()
  );
}

export type DistributeRewardsInput<
  TAccountConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Reward payer */
  payer: TransactionSigner<TAccountPayer>;
  /** System program account */
  systemProgram?: Address<TAccountSystemProgram>;
  args: DistributeRewardsInstructionDataArgs['args'];
};

export function getDistributeRewardsInstruction<
  TAccountConfig extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
>(
  input: DistributeRewardsInput<
    TAccountConfig,
    TAccountPayer,
    TAccountSystemProgram
  >
): DistributeRewardsInstruction<
  typeof STAKE_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDistributeRewardsInstructionDataEncoder().encode(
      args as DistributeRewardsInstructionDataArgs
    ),
  } as DistributeRewardsInstruction<
    typeof STAKE_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDistributeRewardsInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Reward payer */
    payer: TAccountMetas[1];
    /** System program account */
    systemProgram: TAccountMetas[2];
  };
  data: DistributeRewardsInstructionData;
};

export function parseDistributeRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDistributeRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDistributeRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
